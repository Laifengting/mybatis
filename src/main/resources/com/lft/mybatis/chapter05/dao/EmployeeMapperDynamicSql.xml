<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
	namespace:名称空间（类似于包名+类名，用于找到 SQL 语句所有的 mapper.xml 文件）
	指定为接口的全类名
-->
<mapper namespace = "com.lft.mybatis.chapter05.dao.EmployeeMapperDynamicSql">
	<!--
		if：判断
		choose、when、otherwise：分支选择，相当于带了 break 的 switch case
		trim 字符串截取、where(封装查询条件)、set(封装修改条件)
		foreach：遍历
	-->
	<!-- 需求：查询员工，携带了哪个字段，查询条件就带上这个字段的值 -->
	<!-- List<Employee> getEmployeeByConditionIf(Employee employee); -->
	<select id = "getEmployeeByConditionIf"
			resultType = "com.lft.mybatis.chapter05.entity.Employee">
		SELECT id, last_name lastName, email, gender
		FROM tbl_employee
		<!--
			查询的时候如果 某些条件没带可能 SQL 拼接的时候会出现问题。
			解决1：在 WHERE 后面加上 1=1，后面的条件都加上 AND
			解决2：MyBatis 使用 where 标签来解决，会把 where 标签中拼接的 SQL 多出来的 and or 去掉。
				缺点，或者 AND 放在语句后面。只能去掉第一个多出来的 AND
		-->
		<!-- WHERE 1=1 -->
		<where>
			<!--
				test：判断表达式（OGNL表达式）
				从参数中取值进行判断
				遇到特殊符号可以使用转义字符
				&quot; 就是 "
			-->
			<if test = "id!=null">
				AND id = #{id}
			</if>
			<if test = "lastName != null &amp;&amp; lastName != &quot;&quot;">
				AND last_name LIKE CONCAT("%",#{lastName},"%")
			</if>

			<if test = "email!=null and email.trim() != &quot;&quot;">
				AND email = #{email}
			</if>
			<!-- OGNL 会进行字符串与数字的转换判断 -->
			<if test = "gender==0 or gender==1">
				AND gender = #{gender}
			</if>
		</where>
	</select>

	<!-- List<Employee> getEmployeeByConditionTrim(Employee employee); -->
	<select id = "getEmployeeByConditionTrim"
			resultType = "com.lft.mybatis.chapter05.entity.Employee">
		SELECT id, last_name lastName, email, gender
		FROM tbl_employee
		<!--
			后面多出来的 AND OR，where标签不能去除掉
			trim 标签
				prefix：前缀，在拼接整个字符串后，在最前面加一个前缀
				prefixOverrides：前缀去除
				suffix：后缀，在拼接整个字符串后，在最后面加一个后缀
				suffixOverrides：后缀去除
		-->
		<trim prefix = "where"
			  prefixOverrides = "AND"
			  suffix = ""
			  suffixOverrides = "AND">
			<if test = "id!=null">
				id = #{id} AND
			</if>
			<if test = "lastName != null &amp;&amp; lastName != &quot;&quot;">
				last_name LIKE CONCAT("%",#{lastName},"%") AND
			</if>

			<if test = "email!=null and email.trim() != &quot;&quot;">
				email = #{email} AND
			</if>
			<!-- OGNL 会进行字符串与数字的转换判断 -->
			<if test = "gender==0 or gender==1">
				gender = #{gender}
			</if>
		</trim>
	</select>

	<!-- List<Employee> getEmployeeByConditionChoose(Employee employee); -->
	<select id = "getEmployeeByConditionChoose"
			resultType = "com.lft.mybatis.chapter05.entity.Employee">
		SELECT id, last_name lastName, email, gender
		FROM tbl_employee
		<where>
			<choose>
				<when test = "id != null">
					id = #{id}
				</when>
				<when test = "lastName != null &amp;&amp; lastName != &quot;&quot;">
					last_name LIKE CONCAT("%",#{lastName},"%")
				</when>
				<when test = "email!=null and email.trim() != &quot;&quot;">
					email = #{email}
				</when>
				<otherwise>
					gender = 0
				</otherwise>
			</choose>
		</where>
	</select>

	<!-- void updateEmployee(Employee employee); -->
	<update id = "updateEmployee">
		UPDATE tbl_employee
		<set>
			<if test = "lastName != null and lastName != &quot;&quot;">
				last_name = #{lastName}
			</if>
			<if test = "email!=null and email.trim() != &quot;&quot;">
				email = #{email}
			</if>
			<if test = "gender!=null and gender != &quot;&quot;">
				gender = #{gender}
			</if>
		</set>
		WHERE id = #{id}
	</update>

	<!-- void updateEmployee(Employee employee); -->
	<update id = "updateEmployee2">
		UPDATE tbl_employee
		<trim prefix = "set"
			  prefixOverrides = ""
			  suffix = ""
			  suffixOverrides = ",">
			<if test = "lastName != null and lastName != &quot;&quot;">
				last_name = #{lastName},
			</if>
			<if test = "email!=null and email.trim() != &quot;&quot;">
				email = #{email},
			</if>
			<if test = "gender!=null and gender != &quot;&quot;">
				gender = #{gender},
			</if>
		</trim>
		WHERE id = #{id}
	</update>
</mapper>

